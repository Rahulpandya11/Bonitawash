{"ast":null,"code":"import { BOOKING_FORM_URL, SERVICES, BUSINESS_HOURS, FORM_FIELDS } from '../../constants/booking';\n\n// Function to open booking form with pre-filled service\nexport const openBookingForm = (serviceName = '') => {\n  // Get service details\n  const service = Object.values(SERVICES).find(s => s.name === serviceName);\n\n  // Construct form URL with parameters\n  let formUrl = BOOKING_FORM_URL;\n  if (service) {\n    // Add service parameters to URL\n    const params = new URLSearchParams();\n    params.append('usp', 'pp_url');\n    params.append(FORM_FIELDS.PACKAGE, service.name);\n    formUrl += `?${params.toString()}`;\n  }\n\n  // Open form in new tab\n  window.open(formUrl, '_blank');\n};\n\n// Function to validate booking time\nexport const isValidBookingTime = (date, time) => {\n  const dateObj = new Date(date + 'T' + time);\n  const day = dateObj.getDay();\n  const hours = dateObj.getHours();\n  const minutes = dateObj.getMinutes();\n\n  // Check if it's a weekend\n  const isWeekend = day === 0 || day === 6;\n\n  // Get business hours\n  const businessHours = isWeekend ? BUSINESS_HOURS.weekends : BUSINESS_HOURS.weekdays;\n\n  // Convert business hours to minutes for comparison\n  const [startHour, startMinute] = businessHours.start.split(':').map(Number);\n  const [endHour, endMinute] = businessHours.end.split(':').map(Number);\n  const bookingTimeInMinutes = hours * 60 + minutes;\n  const startTimeInMinutes = startHour * 60 + startMinute;\n  const endTimeInMinutes = endHour * 60 + endMinute;\n  return bookingTimeInMinutes >= startTimeInMinutes && bookingTimeInMinutes <= endTimeInMinutes;\n};\n\n// Function to format date for display\nexport const formatBookingDate = date => {\n  return new Date(date).toLocaleDateString('en-US', {\n    weekday: 'long',\n    year: 'numeric',\n    month: 'long',\n    day: 'numeric'\n  });\n};\n\n// Function to format time for display\nexport const formatBookingTime = time => {\n  return new Date(`2000-01-01T${time}`).toLocaleTimeString('en-US', {\n    hour: 'numeric',\n    minute: '2-digit',\n    hour12: true\n  });\n};","map":{"version":3,"names":["BOOKING_FORM_URL","SERVICES","BUSINESS_HOURS","FORM_FIELDS","openBookingForm","serviceName","service","Object","values","find","s","name","formUrl","params","URLSearchParams","append","PACKAGE","toString","window","open","isValidBookingTime","date","time","dateObj","Date","day","getDay","hours","getHours","minutes","getMinutes","isWeekend","businessHours","weekends","weekdays","startHour","startMinute","start","split","map","Number","endHour","endMinute","end","bookingTimeInMinutes","startTimeInMinutes","endTimeInMinutes","formatBookingDate","toLocaleDateString","weekday","year","month","formatBookingTime","toLocaleTimeString","hour","minute","hour12"],"sources":["C:/Users/ASUS/Downloads/carwash/carwash/carwash-react/src/components/utils/booking.js"],"sourcesContent":["import { BOOKING_FORM_URL, SERVICES, BUSINESS_HOURS, FORM_FIELDS } from '../../constants/booking';\r\n\r\n// Function to open booking form with pre-filled service\r\nexport const openBookingForm = (serviceName = '') => {\r\n    // Get service details\r\n    const service = Object.values(SERVICES).find(s => s.name === serviceName);\r\n    \r\n    // Construct form URL with parameters\r\n    let formUrl = BOOKING_FORM_URL;\r\n    \r\n    if (service) {\r\n        // Add service parameters to URL\r\n        const params = new URLSearchParams();\r\n        params.append('usp', 'pp_url');\r\n        params.append(FORM_FIELDS.PACKAGE, service.name);\r\n        formUrl += `?${params.toString()}`;\r\n    }\r\n    \r\n    // Open form in new tab\r\n    window.open(formUrl, '_blank');\r\n};\r\n\r\n// Function to validate booking time\r\nexport const isValidBookingTime = (date, time) => {\r\n    const dateObj = new Date(date + 'T' + time);\r\n    const day = dateObj.getDay();\r\n    const hours = dateObj.getHours();\r\n    const minutes = dateObj.getMinutes();\r\n    \r\n    // Check if it's a weekend\r\n    const isWeekend = day === 0 || day === 6;\r\n    \r\n    // Get business hours\r\n    const businessHours = isWeekend ? BUSINESS_HOURS.weekends : BUSINESS_HOURS.weekdays;\r\n    \r\n    // Convert business hours to minutes for comparison\r\n    const [startHour, startMinute] = businessHours.start.split(':').map(Number);\r\n    const [endHour, endMinute] = businessHours.end.split(':').map(Number);\r\n    \r\n    const bookingTimeInMinutes = hours * 60 + minutes;\r\n    const startTimeInMinutes = startHour * 60 + startMinute;\r\n    const endTimeInMinutes = endHour * 60 + endMinute;\r\n    \r\n    return bookingTimeInMinutes >= startTimeInMinutes && \r\n           bookingTimeInMinutes <= endTimeInMinutes;\r\n};\r\n\r\n// Function to format date for display\r\nexport const formatBookingDate = (date) => {\r\n    return new Date(date).toLocaleDateString('en-US', {\r\n        weekday: 'long',\r\n        year: 'numeric',\r\n        month: 'long',\r\n        day: 'numeric'\r\n    });\r\n};\r\n\r\n// Function to format time for display\r\nexport const formatBookingTime = (time) => {\r\n    return new Date(`2000-01-01T${time}`).toLocaleTimeString('en-US', {\r\n        hour: 'numeric',\r\n        minute: '2-digit',\r\n        hour12: true\r\n    });\r\n}; "],"mappings":"AAAA,SAASA,gBAAgB,EAAEC,QAAQ,EAAEC,cAAc,EAAEC,WAAW,QAAQ,yBAAyB;;AAEjG;AACA,OAAO,MAAMC,eAAe,GAAGA,CAACC,WAAW,GAAG,EAAE,KAAK;EACjD;EACA,MAAMC,OAAO,GAAGC,MAAM,CAACC,MAAM,CAACP,QAAQ,CAAC,CAACQ,IAAI,CAACC,CAAC,IAAIA,CAAC,CAACC,IAAI,KAAKN,WAAW,CAAC;;EAEzE;EACA,IAAIO,OAAO,GAAGZ,gBAAgB;EAE9B,IAAIM,OAAO,EAAE;IACT;IACA,MAAMO,MAAM,GAAG,IAAIC,eAAe,CAAC,CAAC;IACpCD,MAAM,CAACE,MAAM,CAAC,KAAK,EAAE,QAAQ,CAAC;IAC9BF,MAAM,CAACE,MAAM,CAACZ,WAAW,CAACa,OAAO,EAAEV,OAAO,CAACK,IAAI,CAAC;IAChDC,OAAO,IAAI,IAAIC,MAAM,CAACI,QAAQ,CAAC,CAAC,EAAE;EACtC;;EAEA;EACAC,MAAM,CAACC,IAAI,CAACP,OAAO,EAAE,QAAQ,CAAC;AAClC,CAAC;;AAED;AACA,OAAO,MAAMQ,kBAAkB,GAAGA,CAACC,IAAI,EAAEC,IAAI,KAAK;EAC9C,MAAMC,OAAO,GAAG,IAAIC,IAAI,CAACH,IAAI,GAAG,GAAG,GAAGC,IAAI,CAAC;EAC3C,MAAMG,GAAG,GAAGF,OAAO,CAACG,MAAM,CAAC,CAAC;EAC5B,MAAMC,KAAK,GAAGJ,OAAO,CAACK,QAAQ,CAAC,CAAC;EAChC,MAAMC,OAAO,GAAGN,OAAO,CAACO,UAAU,CAAC,CAAC;;EAEpC;EACA,MAAMC,SAAS,GAAGN,GAAG,KAAK,CAAC,IAAIA,GAAG,KAAK,CAAC;;EAExC;EACA,MAAMO,aAAa,GAAGD,SAAS,GAAG7B,cAAc,CAAC+B,QAAQ,GAAG/B,cAAc,CAACgC,QAAQ;;EAEnF;EACA,MAAM,CAACC,SAAS,EAAEC,WAAW,CAAC,GAAGJ,aAAa,CAACK,KAAK,CAACC,KAAK,CAAC,GAAG,CAAC,CAACC,GAAG,CAACC,MAAM,CAAC;EAC3E,MAAM,CAACC,OAAO,EAAEC,SAAS,CAAC,GAAGV,aAAa,CAACW,GAAG,CAACL,KAAK,CAAC,GAAG,CAAC,CAACC,GAAG,CAACC,MAAM,CAAC;EAErE,MAAMI,oBAAoB,GAAGjB,KAAK,GAAG,EAAE,GAAGE,OAAO;EACjD,MAAMgB,kBAAkB,GAAGV,SAAS,GAAG,EAAE,GAAGC,WAAW;EACvD,MAAMU,gBAAgB,GAAGL,OAAO,GAAG,EAAE,GAAGC,SAAS;EAEjD,OAAOE,oBAAoB,IAAIC,kBAAkB,IAC1CD,oBAAoB,IAAIE,gBAAgB;AACnD,CAAC;;AAED;AACA,OAAO,MAAMC,iBAAiB,GAAI1B,IAAI,IAAK;EACvC,OAAO,IAAIG,IAAI,CAACH,IAAI,CAAC,CAAC2B,kBAAkB,CAAC,OAAO,EAAE;IAC9CC,OAAO,EAAE,MAAM;IACfC,IAAI,EAAE,SAAS;IACfC,KAAK,EAAE,MAAM;IACb1B,GAAG,EAAE;EACT,CAAC,CAAC;AACN,CAAC;;AAED;AACA,OAAO,MAAM2B,iBAAiB,GAAI9B,IAAI,IAAK;EACvC,OAAO,IAAIE,IAAI,CAAC,cAAcF,IAAI,EAAE,CAAC,CAAC+B,kBAAkB,CAAC,OAAO,EAAE;IAC9DC,IAAI,EAAE,SAAS;IACfC,MAAM,EAAE,SAAS;IACjBC,MAAM,EAAE;EACZ,CAAC,CAAC;AACN,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}